import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms

# Define transforms for data augmentation
transform_train = transforms.Compose([
    transforms.RandomHorizontalFlip(),
    transforms.RandomCrop(32, padding=4),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

# Load CIFAR-10 dataset
trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=32, shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)
testloader = torch.utils.data.DataLoader(testset, batch_size=32, shuffle=False, num_workers=2)

# Define the network architecture
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5).cuda()
        self.pool = nn.MaxPool2d(2, 2).cuda()
        self.conv2 = nn.Conv2d(6, 16, 5).cuda()
        self.fc1 = nn.Linear(16 * 5 * 5, 120).cuda()
        self.fc2 = nn.Linear(120, 84).cuda()
        self.fc3 = nn.Linear(84, 10).cuda()

    def forward(self, x):
        x = self.pool(torch.relu(self.conv1(x.cuda())).cuda())
        x = self.pool(torch.relu(self.conv2(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

net = Net()

# Define loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)
losses = []
# Train the network
for epoch in range(30):
    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = net(inputs.cuda())
        loss = criterion(outputs.cuda(), labels.cuda())
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        if i % 200 == 199:
            print('[%d, %5d] loss: %.3f' % (epoch + 1, i + 1, running_loss / 200))
            losses += [running_loss/200]
            running_loss = 0.0

print("losses", losses)


print('Finished Training')

# Test the network
correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images.cuda())
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels.cuda()).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (100 * correct / total))

"""


losses [2.3019278299808503, 2.301166242361069, 2.2988915622234343, 2.2941604018211366, 2.281431144475937, 2.245166517496109, 2.1835751873254776, 2.061405799984932, 2.038187189698219, 1.9985895854234697, 1.950812686085701, 1.9163471519947053, 1.8746720051765442, 1.8205078583955765, 1.8183836221694947, 1.7794363498687744, 1.7539408814907074, 1.758451952934265, 1.7251342141628265, 1.7203442233800887, 1.689018993973732, 1.6694547075033188, 1.6717270028591156, 1.6645358461141586, 1.6481930857896805, 1.6313623267412185, 1.607653340101242, 1.640110393166542, 1.5802282059192658, 1.5920044028759002, 1.59802020072937, 1.5686429464817047, 1.5626494401693345, 1.5757106345891954, 1.555823210477829, 1.529518570303917, 1.515875949859619, 1.5198151516914367, 1.5162340885400771, 1.517078360915184, 1.490203930735588, 1.5097405511140822, 1.4748226499557495, 1.4923441237211228, 1.463630874156952, 1.4798569333553315, 1.4386274403333663, 1.4287746804952621, 1.4662756007909774, 1.4364653459191323, 1.4133511650562287, 1.3943737465143204, 1.412996217906475, 1.3994091448187829, 1.4255205714702606, 1.3974679699540138, 1.3872087129950523, 1.3797432893514634, 1.3584969383478165, 1.3722021901607513, 1.384513778090477, 1.356756332218647, 1.3487401452660561, 1.340086784362793, 1.34927181661129, 1.3623451256752015, 1.322678210735321, 1.3368460363149643, 1.3237439879775048, 1.3264485242962838, 1.3089017927646638, 1.3001591965556145, 1.3264879012107849, 1.3031964847445487, 1.3052946212887764, 1.304066443145275, 1.2823484069108964, 1.2885412538051606, 1.294393621981144, 1.268070587515831, 1.2664758875966071, 1.2868858060240747, 1.2583598700165748, 1.245288699567318, 1.2648159712553024, 1.2520923492312432, 1.2562218433618546, 1.2555167973041534, 1.2389101892709733, 1.2574427849054337, 1.2592432206869126, 1.2453618535399438, 1.222560987174511, 1.2128913822770118, 1.223472768366337, 1.2156418162584304, 1.2384187099337578, 1.2156946578621863, 1.2110434332489968, 1.214885811507702, 1.2214332509040833, 1.1950696870684623, 1.1943506887555122, 1.2172799015045166, 1.2047951498627663, 1.1747900122404098, 1.177995529472828, 1.1929438710212708, 1.1989498475193978, 1.1572937968373298, 1.1794058829545975, 1.1688248378038406, 1.1615636536478997, 1.169554327726364, 1.1486227506399154, 1.1449261808395386, 1.1753734597563743, 1.176910118162632, 1.1722894111275672, 1.1527306750416755, 1.1285877335071564, 1.1568341633677484, 1.1536618226766586, 1.1590147930383683, 1.1313945257663727, 1.1374480932950974, 1.1481699422001839, 1.125232010781765, 1.1303863570094108, 1.1218430238962174, 1.1047981721162796, 1.1032794615626336, 1.1334380832314492, 1.1285684084892273, 1.11790617197752, 1.1159631618857384, 1.1091893869638443, 1.1275458854436875, 1.0909831088781357, 1.1019760602712632, 1.1147573393583299, 1.081600436270237, 1.1024081027507782, 1.0764003777503968, 1.117754077911377, 1.1041468450427054, 1.07830476552248, 1.0905262675881386, 1.0691216269135475, 1.0809444338083267, 1.1058603544533252, 1.0626249355077744, 1.1005515089631082, 1.0960790768265725, 1.0971272659301758, 1.0713126486539841, 1.0403263014554978, 1.067133062183857, 1.0945446199178697, 1.0672349700331687, 1.0799585318565368, 1.0548525106906892, 1.04543320864439, 1.0597428929805757, 1.0620900726318359, 1.0500939106941223, 1.0447418239712716, 1.0664307433366775, 1.0448218071460724, 1.062374865412712, 1.0524990206956863, 1.0719051721692086, 1.0480658939480783, 1.0176423498988152, 1.0334143087267875, 1.0448026847839356, 1.0601581254601478, 1.0346341562271117, 1.0236680489778518, 1.0392473110556602, 1.0686877688765526, 1.034850164949894, 1.0283754935860634, 1.0234747609496118, 1.0221666026115417, 1.008715408742428, 1.0282620245218277, 1.0528564363718034, 1.03252157330513, 1.0441281354427339, 1.029398841559887, 1.0280087050795554, 1.018784505724907, 1.024419678747654, 1.034342693090439, 1.0170697674155236, 1.016440200507641, 1.011916847527027, 1.016133974790573, 1.0103023637831212, 1.0225497776269912, 1.0001121434569358, 1.020009653866291, 0.9888746675848961, 1.0100896647572517, 1.0020241606235505, 0.9986780087649823, 0.9861634001135826, 1.0128077694773674, 1.011244307011366]
Finished Training
Accuracy of the network on the 10000 test images: 67 %
"""
